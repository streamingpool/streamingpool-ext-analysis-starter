buildscript {
    project.ext['CERN_VM'] = System.getProperty('CERN_TECHNET_VM') ?: System.getenv('CERN_TECHNET_VM') ?: project.hasProperty('CERN_TECHNET_VM') ?: false
    project.ext['DEPLOYMENT'] = System.getProperty('DEPLOYMENT') ?: false

    repositories {
        if (project['CERN_VM']) {
            maven { url 'http://artifactory.cern.ch/ds-jcenter' }
            maven { url 'http://artifactory.cern.ch/development' }
            maven { url 'http://artifactory.cern.ch/gradle-plugins' }
        } else {
            gradlePluginPortal()
        }
    }

    dependencies {
        classpath 'com.github.jk1:gradle-license-report:1.5'
        classpath 'io.github.gradle-nexus:publish-plugin:1.0.0'
    }
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'idea'
apply plugin: 'eclipse'

group = project['POM.groupId']

sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
    if (CERN_VM) {
        maven { url 'http://artifactory.cern.ch/ds-jcenter' }
        maven { url 'http://artifactory.cern.ch/development' }
    } else {
        mavenCentral()
    }
}

dependencies {
    compile group: 'org.streamingpool', name: 'streamingpool-ext-analysis', version: streamingpoolExtAnalysisVersion
    compile group: 'org.streamingpool', name: 'streamingpool-core-starter', version: streamingpoolCoreStarterVersion
    compile group: 'org.tensorics', name: 'tensorics-core-starter', version: tensoricsCoreStarterVersion
    compile (group: 'org.springframework.boot', name: 'spring-boot-starter', version: springBootVersion) { exclude module: "spring-boot-starter-logging" }
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion
}


sourceSets {
    main {
        java { srcDir 'src/java' }
        resources { srcDir 'src/resources' }
    }
}

wrapper {
    gradleVersion = '5.4.1'
    distributionType = Wrapper.DistributionType.ALL
}

javadoc { options.encoding = "UTF-8" }

if(!project.tasks.findByName("javadocJar")) {
    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }
}

if(!project.tasks.findByName("sourcesJar")) {
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination new File("${buildDir}/reports/jacoco/report.xml")
        html.enabled true
        csv.enabled false
    }
}

eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

if (!project['CERN_VM']) {
    println 'Applying licensing report'
    apply plugin: 'com.github.jk1.dependency-license-report'

    licenseReport {
        renderers = [this.class.classLoader.loadClass('com.github.jk1.license.render.InventoryHtmlReportRenderer').newInstance()]
        filters = [this.class.classLoader.loadClass('com.github.jk1.license.filter.LicenseBundleNormalizer').newInstance()]
    }
}

if (project['DEPLOYMENT']) {
    println 'Applying deployment scripts'
    apply from: 'https://raw.githubusercontent.com/ossgang/gradle-scripts/master/deployment/deploy-to-maven-central.gradle'
}
